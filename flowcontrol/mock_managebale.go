// Code generated by mockery v2.43.2. DO NOT EDIT.

package flowcontrol

import mock "github.com/stretchr/testify/mock"

// MockManageable is an autogenerated mock type for the Manageable type
type MockManageable struct {
	mock.Mock
}

// ServiceManager provides a mock function with given fields:
func (_m *MockManageable) ServiceManager() ServiceManager {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ServiceManager")
	}

	var r0 ServiceManager
	if rf, ok := ret.Get(0).(func() ServiceManager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ServiceManager)
		}
	}

	return r0
}

// NewMockManageable creates a new instance of MockManageable. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockManageable(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockManageable {
	mock := &MockManageable{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
