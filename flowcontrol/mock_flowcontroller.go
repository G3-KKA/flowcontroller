// Code generated by mockery v2.43.2. DO NOT EDIT.

package flowcontrol

import mock "github.com/stretchr/testify/mock"

// MockFlowController is an autogenerated mock type for the FlowController type
type MockFlowController struct {
	mock.Mock
}

// Metadata provides a mock function with given fields: identifier
func (_m *MockFlowController) Metadata(identifier SID) (ServiceMetadata, error) {
	ret := _m.Called(identifier)

	if len(ret) == 0 {
		panic("no return value specified for Metadata")
	}

	var r0 ServiceMetadata
	var r1 error
	if rf, ok := ret.Get(0).(func(SID) (ServiceMetadata, error)); ok {
		return rf(identifier)
	}
	if rf, ok := ret.Get(0).(func(SID) ServiceMetadata); ok {
		r0 = rf(identifier)
	} else {
		r0 = ret.Get(0).(ServiceMetadata)
	}

	if rf, ok := ret.Get(1).(func(SID) error); ok {
		r1 = rf(identifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Register provides a mock function with given fields: service
func (_m *MockFlowController) Register(service Manageable) (SID, error) {
	ret := _m.Called(service)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 SID
	var r1 error
	if rf, ok := ret.Get(0).(func(Manageable) (SID, error)); ok {
		return rf(service)
	}
	if rf, ok := ret.Get(0).(func(Manageable) SID); ok {
		r0 = rf(service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SID)
		}
	}

	if rf, ok := ret.Get(1).(func(Manageable) error); ok {
		r1 = rf(service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterOpt provides a mock function with given fields: service, opts
func (_m *MockFlowController) RegisterOpt(service Manageable, opts Options) (SID, error) {
	ret := _m.Called(service, opts)

	if len(ret) == 0 {
		panic("no return value specified for RegisterOpt")
	}

	var r0 SID
	var r1 error
	if rf, ok := ret.Get(0).(func(Manageable, Options) (SID, error)); ok {
		return rf(service, opts)
	}
	if rf, ok := ret.Get(0).(func(Manageable, Options) SID); ok {
		r0 = rf(service, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(SID)
		}
	}

	if rf, ok := ret.Get(1).(func(Manageable, Options) error); ok {
		r1 = rf(service, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockFlowController creates a new instance of MockFlowController. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFlowController(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFlowController {
	mock := &MockFlowController{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
